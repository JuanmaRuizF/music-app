/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import javax.swing.DefaultListModel;
import model.*;
import file.GestorMusicFile;
import java.util.ArrayList;
/**
 *
 * @author eduma
 */
public class MenuUsuario extends javax.swing.JFrame {

    /**
     * Creates new form MenuUsuario
     */
    String aborrar;
    String avalorar;
    int indice = -1; //Número de elemento seleccionado de la lista
    GestorMusicFile gestorMusicFile;
    GestorMusic gestorMusic;
    boolean carga = false; //Booleano para saber si se ha cargado las canciones y albumes del gestor
    public void mostrar(){
        playlistList.add(gestorMusic.playlists.get(0).getNombrePlaylist());
        playlistList.add(gestorMusic.playlists.get(1).getNombrePlaylist());
    }
    public void mostrar(String k1){
        playlistList.add(k1);
    }
    public MenuUsuario(GestorMusic gestorMusic){
        this.gestorMusic = gestorMusic;
        gestorMusicFile = new GestorMusicFile();
        initComponents();
        mostrar();
    }
    
    public MenuUsuario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AlbumLabel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        addPlaylistButton = new javax.swing.JButton();
        busquedaButton = new javax.swing.JTextField();
        buscarButton = new javax.swing.JButton();
        combo = new javax.swing.JComboBox();
        ValorarButton = new javax.swing.JButton();
        reordenarButton = new javax.swing.JButton();
        addCancionButton = new javax.swing.JButton();
        reproducirButton = new javax.swing.JButton();
        borrarPlayButton = new javax.swing.JButton();
        busquedaCombo = new javax.swing.JComboBox();
        cargarButton = new javax.swing.JButton();
        CancionesList = new java.awt.List();
        playlistList = new java.awt.List();
        AlbumsList = new java.awt.List();
        valoracionList = new java.awt.List();
        valoracionMediaLabel = new java.awt.Label();
        addComboBox = new javax.swing.JComboBox();
        artistaLabel = new javax.swing.JLabel();
        duracionLabel = new javax.swing.JLabel();
        GenLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        artistaList = new java.awt.List();
        duracionList = new java.awt.List();
        albumSongList = new java.awt.List();
        genList = new java.awt.List();
        descripList = new java.awt.List();
        descripLabel = new java.awt.Label();
        borrarSongButton = new javax.swing.JButton();
        rudPerfilButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestor de música");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Canciones");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Playlists");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Álbumes");

        addPlaylistButton.setText("Añadir Playlist");
        addPlaylistButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addPlaylistButtonMouseClicked(evt);
            }
        });
        addPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaylistButtonActionPerformed(evt);
            }
        });

        buscarButton.setText("Buscar");
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        ValorarButton.setText("Valorar Playlist");
        ValorarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValorarButtonActionPerformed(evt);
            }
        });

        reordenarButton.setText("Reordenar canciones por duración");
        reordenarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reordenarButtonActionPerformed(evt);
            }
        });

        addCancionButton.setText("Añadir a Playlist");
        addCancionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCancionButtonActionPerformed(evt);
            }
        });

        reproducirButton.setText("Reproducir");
        reproducirButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reproducirButtonMouseClicked(evt);
            }
        });
        reproducirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reproducirButtonActionPerformed(evt);
            }
        });

        borrarPlayButton.setText("Borrar Playlist");
        borrarPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarPlayButtonActionPerformed(evt);
            }
        });

        busquedaCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Canciones", "Playlists", "Álbumes" }));
        busquedaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busquedaComboActionPerformed(evt);
            }
        });

        cargarButton.setText("Cargar ");
        cargarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarButtonActionPerformed(evt);
            }
        });

        CancionesList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancionesListActionPerformed(evt);
            }
        });

        playlistList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistListActionPerformed(evt);
            }
        });

        valoracionList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valoracionListActionPerformed(evt);
            }
        });

        valoracionMediaLabel.setFont(new java.awt.Font("Leelawadee", 1, 14)); // NOI18N
        valoracionMediaLabel.setText("Valoración media");

        addComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cancion", "Album" }));

        artistaLabel.setText("Artista");

        duracionLabel.setText("Duración");

        GenLabel.setText("Género");

        jLabel6.setText("Álbum");

        artistaList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistaListActionPerformed(evt);
            }
        });

        descripList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descripListActionPerformed(evt);
            }
        });

        descripLabel.setText("Descripción");

        borrarSongButton.setText("Borrar ");
        borrarSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarSongButtonActionPerformed(evt);
            }
        });

        rudPerfilButton.setText("Editar Perfil");
        rudPerfilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rudPerfilButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AlbumLabelLayout = new javax.swing.GroupLayout(AlbumLabel);
        AlbumLabel.setLayout(AlbumLabelLayout);
        AlbumLabelLayout.setHorizontalGroup(
            AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AlbumLabelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AlbumLabelLayout.createSequentialGroup()
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CancionesList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(cargarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addGap(308, 308, 308)
                                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(valoracionMediaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(descripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(AlbumsList, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(busquedaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(AlbumLabelLayout.createSequentialGroup()
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(duracionLabel)
                                    .addComponent(artistaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(GenLabel)
                                    .addComponent(jLabel6))
                                .addGap(37, 37, 37)
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(duracionList, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(genList, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                    .addComponent(albumSongList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(77, 77, 77)
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addComponent(addPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(busquedaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addComponent(borrarPlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buscarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addComponent(ValorarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(reproducirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(reordenarButton)
                                            .addComponent(jLabel2)
                                            .addGroup(AlbumLabelLayout.createSequentialGroup()
                                                .addComponent(playlistList, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(25, 25, 25)
                                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(descripList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(valoracionList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(50, 50, 50))
                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(artistaList, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addCancionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrarSongButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(AlbumLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rudPerfilButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        AlbumLabelLayout.setVerticalGroup(
            AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AlbumLabelLayout.createSequentialGroup()
                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                        .addComponent(rudPerfilButton)
                        .addGap(25, 25, 25)
                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AlbumLabelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(valoracionMediaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                        .addComponent(valoracionList, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(descripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descripList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CancionesList, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playlistList, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AlbumsList, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AlbumLabelLayout.createSequentialGroup()
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(busquedaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(reordenarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(busquedaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(borrarPlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buscarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ValorarButton)
                                    .addComponent(reproducirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(AlbumLabelLayout.createSequentialGroup()
                                .addComponent(cargarButton)
                                .addGap(82, 82, 82)
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(artistaLabel)
                                    .addComponent(artistaList, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addComponent(duracionLabel)
                                        .addGap(37, 37, 37))
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addComponent(duracionList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addGap(26, 26, 26)))
                                .addGroup(AlbumLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(GenLabel)
                                        .addGap(35, 35, 35)
                                        .addComponent(jLabel6))
                                    .addGroup(AlbumLabelLayout.createSequentialGroup()
                                        .addComponent(genList, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(albumSongList, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                                .addComponent(addComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addCancionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(borrarSongButton)
                        .addGap(5, 5, 5))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AlbumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(AlbumLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaylistButtonActionPerformed
        //Al hacer click en el botón añadir playlist, se abrira una nueva interfaz para abrir la playlist
        AñadirPlaylist p= new AñadirPlaylist(this,gestorMusic);
        p.setVisible(true);
        
    }//GEN-LAST:event_addPlaylistButtonActionPerformed

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        //Botón para hacer una búsqueda en el gestor de música
        String buscar = busquedaCombo.getSelectedItem().toString();
        String busqueda = busquedaButton.getText();
        if(buscar != null){
            if(buscar.equals("Canciones")){
                CancionesList.removeAll();
                int i = 0;
                for(i = 0; i<gestorMusic.canciones.size(); i++){
                    if(gestorMusic.canciones.get(i).getNombreCancion().toLowerCase().indexOf(busqueda.toLowerCase()) != -1){
                        CancionesList.add(gestorMusic.canciones.get(i).getNombreCancion());
                    }
                }
            }
            if(buscar.equals("Playlists")){
                playlistList.removeAll();
                int i = 0;
                for(i = 0; i<gestorMusic.playlists.size(); i++){
                    if(gestorMusic.playlists.get(i).getNombrePlaylist().toLowerCase().indexOf(busqueda.toLowerCase()) != -1){
                        playlistList.add(gestorMusic.playlists.get(i).getNombrePlaylist());
                    }
                }    
            }
            if(buscar.equals("Álbumes")){
                AlbumsList.removeAll();
                int i = 0;
                for(i = 0; i<gestorMusic.albumes.size(); i++){
                    if(gestorMusic.albumes.get(i).getNombreAlbum().toLowerCase().indexOf(busqueda.toLowerCase()) != -1){
                        AlbumsList.add(gestorMusic.albumes.get(i).getNombreAlbum());
                    }
                }  
            }
            buscar = "";
        }
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void addPlaylistButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPlaylistButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addPlaylistButtonMouseClicked

    private void reordenarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reordenarButtonActionPerformed
        // Método que reordenar las canciones
        indice = playlistList.getSelectedIndex();
        if(playlistList.getSelectedItem() != null){
            CancionesList.removeAll();
            int i;
            int j;
            int aux = 0;
            int [] copia = new int [gestorMusic.playlists.get(indice).cancionesPlay.size()];
            for(i = 0; i < copia.length; i++){
                copia[i] = gestorMusic.playlists.get(indice).cancionesPlay.get(i).getDuracion();
                   
            }    
            for(i = 0; i<copia.length-1 ;i++){ //Método para reordenar las canciones de menor duración a mayor
                for(j = 0; j<copia.length -i-1; j++){
                    if(copia[j+1] < copia[j] ){
                        aux = copia[j+1];
                        copia[j+1] = copia[j];
                        copia[j] = aux;
                       
                    }
                }
            }
            for(j=0;j<copia.length;j++){
                for(i=0;i<gestorMusic.playlists.get(indice).cancionesPlay.size();i++){
                    if(copia[j] == gestorMusic.playlists.get(indice).cancionesPlay.get(i).getDuracion()){
                        CancionesList.add(gestorMusic.playlists.get(indice).cancionesPlay.get(i).getNombreCancion());
                    }
                }
            }
           
        }
        
        
    }//GEN-LAST:event_reordenarButtonActionPerformed

    private void reproducirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproducirButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reproducirButtonActionPerformed

    private void reproducirButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reproducirButtonMouseClicked
        //Se abrira una interfaz donde se reproduce la canción,álbum o playlist seleccionada
        if(CancionesList.getSelectedItem() != null|| playlistList.getSelectedItem() !=null || AlbumsList.getSelectedItem() != null){
            ReproduciendoCancion p = new ReproduciendoCancion();
            p.setVisible(true);
        }
        
    }//GEN-LAST:event_reproducirButtonMouseClicked

    private void borrarPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarPlayButtonActionPerformed
        // Cuando se clicke Borrar Playlist, la playlist desaparece del gestor de música
        aborrar = playlistList.getSelectedItem();//getSelectedValue()
        indice = playlistList.getSelectedIndex();
        if(aborrar != null){
            gestorMusic.playlists.remove(indice);
            playlistList.remove(indice);
            
        }
    }//GEN-LAST:event_borrarPlayButtonActionPerformed

    private void cargarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarButtonActionPerformed
        // Cuando se pulse este botón se cargara todas las canciones y albumes que esté en el fichero
        carga = false;
        gestorMusicFile.loadFromCancion(gestorMusic);
        int i;
        CancionesList.removeAll();
        AlbumsList.removeAll();
        for(i=0 ; i<gestorMusic.canciones.size() ; i++){
            CancionesList.add(gestorMusic.canciones.get(i).getNombreCancion());
        }
        for(i=0; i<gestorMusic.albumes.size(); i++){
            AlbumsList.add(gestorMusic.albumes.get(i).getNombreAlbum());
        }
        
    }//GEN-LAST:event_cargarButtonActionPerformed

    private void ValorarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValorarButtonActionPerformed
        //Método para calcular la valoración media y la valoración puesta por el usuario
        indice = playlistList.getSelectedIndex();
        int valorar;
        Valoracion valorado;
        if(playlistList.getSelectedItem() != null){
            valoracionList.removeAll();
            String x = combo.getSelectedItem().toString();
            valorar = Integer.parseInt(x);
            valorado = new Valoracion(valorar);
            valorado.setPuntuacion(valorar); //Valoración a una playlist
            gestorMusic.playlists.get(indice).setValoracion(valorar);
            valoracionList.add(x);
        }
        
        
    }//GEN-LAST:event_ValorarButtonActionPerformed

    private void CancionesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancionesListActionPerformed
        // Cuando se clicke una canción en su list debe de salir abajo sus atributos (Artista, Género, Álbun duración
        int active;
        int activePlay;
        active = CancionesList.getSelectedIndex();
        activePlay = playlistList.getSelectedIndex();
        if(playlistList.getSelectedItem() != null && carga){
            showAllAtributesSongPlaylist();
            active=CancionesList.getSelectedIndex();
            activePlay=playlistList.getSelectedIndex();
            
        }else{
            active=CancionesList.getSelectedIndex();
            showAllSong();
            carga=false;
        }
    }//GEN-LAST:event_CancionesListActionPerformed

    private void playlistListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlistListActionPerformed
       //Lista donde aparecen todas las playlists
        showPlaylistSong();
        showPlaylistAlbum();
        carga = true;
        int active;
        active=active=playlistList.getSelectedIndex();
        valoracionList.removeAll();
        valoracionList.add(Integer.toString(gestorMusic.playlists.get(active).getValoracion()));
        descripList.removeAll();
        descripList.add(gestorMusic.playlists.get(active).getDescripcion());
    }//GEN-LAST:event_playlistListActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboActionPerformed

    private void valoracionListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valoracionListActionPerformed
  
    }//GEN-LAST:event_valoracionListActionPerformed

    private void addCancionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCancionButtonActionPerformed
        // Añadir canción a una playlist
        String buscar = addComboBox.getSelectedItem().toString();
        if(buscar.equals("Cancion")){
            if(CancionesList.getSelectedItem() != null && playlistList.getSelectedItem() != null){
                if(busquedaButton.getText().equals("")){
                    gestorMusic.playlists.get(playlistList.getSelectedIndex()).addCancionPlaylist(gestorMusic.canciones.get(CancionesList.getSelectedIndex()));
                    showPlaylistSong();
                    int active;
                    active=active=playlistList.getSelectedIndex();
                    buscar = "";
                }else{
                    int i = 0;
                    for(i = 0; i<gestorMusic.canciones.size(); i++){
                        if(gestorMusic.canciones.get(i).getNombreCancion().toLowerCase().indexOf(busquedaButton.getText().toLowerCase()) != -1){
                            gestorMusic.playlists.get(playlistList.getSelectedIndex()).addCancionPlaylist(gestorMusic.canciones.get(i));
                        }
                    }
                    showPlaylistSong();
                    int active;
                    active=active=playlistList.getSelectedIndex();
                    buscar = "";
                }
            }
      
        }
        if(buscar.equals("Album")){
            if(AlbumsList.getSelectedItem() != null && playlistList.getSelectedItem() != null){
                if(busquedaButton.getText().equals("")){
                    gestorMusic.playlists.get(playlistList.getSelectedIndex()).addAlbumPlaylist(gestorMusic.albumes.get(AlbumsList.getSelectedIndex()));
                    showPlaylistAlbum();
                    int active;
                    active=active=playlistList.getSelectedIndex();
                    buscar = "";
                }else{
                    int i = 0;
                    for(i = 0; i<gestorMusic.albumes.size(); i++){
                        if(gestorMusic.albumes.get(i).getNombreAlbum().toLowerCase().indexOf(busquedaButton.getText().toLowerCase()) != -1){
                            gestorMusic.playlists.get(playlistList.getSelectedIndex()).addAlbumPlaylist(gestorMusic.albumes.get(i));
                        }
                    }
                    showPlaylistAlbum();
                    int active;
                    active=active=playlistList.getSelectedIndex();
                    buscar = "";
                
                }
            }
        }
    }//GEN-LAST:event_addCancionButtonActionPerformed

    private void busquedaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busquedaComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_busquedaComboActionPerformed

    private void artistaListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artistaListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_artistaListActionPerformed

    private void descripListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descripListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descripListActionPerformed

    private void borrarSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarSongButtonActionPerformed
        //Metodo para eliminar una cancion o album de una playlist 
        String buscar = addComboBox.getSelectedItem().toString();
        if(buscar.equals("Cancion")){
            int borrar = CancionesList.getSelectedIndex();
            if(CancionesList.getSelectedItem() != null && playlistList.getSelectedItem() != null){
                int active = playlistList.getSelectedIndex();
                if(gestorMusic.playlists.get(active).getNumSong(gestorMusic.playlists.get(active).cancionesPlay) > 0){
                    gestorMusic.playlists.get(playlistList.getSelectedIndex()).removeCancionPlaylist(gestorMusic.playlists.get(active).cancionesPlay.get(borrar));
                    CancionesList.remove(borrar);
                    showPlaylistSong();
                    buscar = "";
                }
            }
        }
        if(buscar.equals("Album")){
            int borrar = AlbumsList.getSelectedIndex();
            if(AlbumsList.getSelectedItem() != null && playlistList.getSelectedItem() != null){
                int active = playlistList.getSelectedIndex();
                if(gestorMusic.playlists.get(active).getNumAlbum(gestorMusic.playlists.get(active).albumesPlay) > 0){
                    gestorMusic.playlists.get(playlistList.getSelectedIndex()).removeAlbumPlaylist(gestorMusic.playlists.get(active).albumesPlay.get(borrar));
                    AlbumsList.remove(borrar);
                    showPlaylistAlbum();
                    buscar = "";
                }
            }
        }
    }//GEN-LAST:event_borrarSongButtonActionPerformed

    private void rudPerfilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rudPerfilButtonActionPerformed
        // Cuando se pulse el botón editar Perfil, se abrira una nueva interfaz
        EditarPerfil qk = new EditarPerfil();
        qk.setVisible(true);
    }//GEN-LAST:event_rudPerfilButtonActionPerformed
    
    public void showAllSong(){ //Método que muestra todas las canciones y sus atributos del gestor de Música
        int activePlay, active;
        artistaList.removeAll();
        genList.removeAll();
        duracionList.removeAll();
        albumSongList.removeAll();
        active=CancionesList.getSelectedIndex();
        activePlay = playlistList.getSelectedIndex();
        artistaList.add(gestorMusic.canciones.get(active).getNombreArtista());
        genList.add(Genero.GeneroEs((gestorMusic.canciones.get(active).getGeneroCancion())));
        String duracion = Integer.toString(gestorMusic.canciones.get(active).getDuracion());
        String dur = duracion.substring(1,3);
        String dur2 = duracion.charAt(0) + ":";
        duracion = dur2 + dur;
        duracionList.add(duracion);
        albumSongList.add((gestorMusic.canciones.get(active).getAlbumCancion()).getNombreAlbum());
        
        
        
    }
    
    public void showPlaylistAlbum(){ //Método para mostrar canciones en AlbumsList de una playlists
        int i, active;
        AlbumsList.removeAll();
        active=playlistList.getSelectedIndex();
        for(i=0; i<gestorMusic.playlists.get(active).albumesPlay.size(); i++){
            AlbumsList.add(gestorMusic.playlists.get(active).albumesPlay.get(i).getNombreAlbum());
        }
    }
    
    public void showPlaylistSong(){ //Método para mostrar canciones en CancionesList de una playlists
        int i, active;
        CancionesList.removeAll();
        active=playlistList.getSelectedIndex();
        for(i=0;i<gestorMusic.playlists.get(active).cancionesPlay.size();i++){
            CancionesList.add(gestorMusic.playlists.get(active).cancionesPlay.get(i).getNombreCancion());
        }
    }
    
    public void showAllAtributesSongPlaylist(){ //Método para mostrar los atributos de canciones en sus respectivos campos de una canción de una Playlisy
            int active;
            int activePlay;
            active = CancionesList.getSelectedIndex();
            activePlay = playlistList.getSelectedIndex();
            artistaList.removeAll();
            genList.removeAll();
            duracionList.removeAll();
            albumSongList.removeAll();
            artistaList.add(gestorMusic.playlists.get(activePlay).cancionesPlay.get(active).getNombreArtista());
            albumSongList.add(gestorMusic.playlists.get(activePlay).cancionesPlay.get(active).getAlbumCancion().getNombreAlbum());
            genList.add(Genero.GeneroEs((gestorMusic.playlists.get(activePlay).cancionesPlay.get(active).getGeneroCancion())));
            String duracion = Integer.toString(gestorMusic.playlists.get(activePlay).cancionesPlay.get(active).getDuracion());
            String dur = duracion.substring(1,3);
            String dur2 = duracion.charAt(0) + ":";
            duracion = dur2 + dur;
            duracionList.add(duracion);
    }
    /**
     * @param args the command line arguments
     */
   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AlbumLabel;
    private java.awt.List AlbumsList;
    private java.awt.List CancionesList;
    private javax.swing.JLabel GenLabel;
    private javax.swing.JButton ValorarButton;
    private javax.swing.JButton addCancionButton;
    private javax.swing.JComboBox addComboBox;
    private javax.swing.JButton addPlaylistButton;
    private java.awt.List albumSongList;
    private javax.swing.JLabel artistaLabel;
    private java.awt.List artistaList;
    private javax.swing.JButton borrarPlayButton;
    private javax.swing.JButton borrarSongButton;
    private javax.swing.JButton buscarButton;
    private javax.swing.JTextField busquedaButton;
    private javax.swing.JComboBox busquedaCombo;
    private javax.swing.JButton cargarButton;
    private javax.swing.JComboBox combo;
    private java.awt.Label descripLabel;
    private java.awt.List descripList;
    private javax.swing.JLabel duracionLabel;
    private java.awt.List duracionList;
    private java.awt.List genList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private java.awt.List playlistList;
    private javax.swing.JButton reordenarButton;
    private javax.swing.JButton reproducirButton;
    private javax.swing.JButton rudPerfilButton;
    private java.awt.List valoracionList;
    private java.awt.Label valoracionMediaLabel;
    // End of variables declaration//GEN-END:variables
}
